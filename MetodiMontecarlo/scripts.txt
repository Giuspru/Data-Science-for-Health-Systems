
% compute pi using a Monte Carlo numeric integration method
% NOTE: area of the circular sector: pi/4
close all
clear 
clc

N = 1e3; % number of Monte Carlo iterations

% plot circular arc
figure(1);
plot(cos(linspace(0,pi/2,1e2)), sin(linspace(0,pi/2,1e2)), 'k')
xlabel('U_1'), ylabel('U_2')
axis square
hold on

% Monte Carlo loop
count = 0;
for k = 1 : N
  u1 = rand;
  u2 = rand;
  if norm([u1 u2]) <= 1 % distance form origin
    count = count + 1;
    plot(u1,u2,'b*')
  else
    plot(u1,u2,'ro')
  end
  %drawnow
end

pi_estimate = count/N * 4 % estimate pi
pi_error = pi_estimate - pi  % compute estimation error 




% compute error of pi estimation  
% for varying number of Monte Carlo (MC) iterations
close all
clear 
clc

% initialize random number generator (for reproducibility)
rand('seed',1) 

N_vector = round(logspace(1,5,13)); % vector of number of MC iterations

tic
for idx_N = 1 : length(N_vector)
  N = N_vector(idx_N);
%   printf('%d\n',N), fflush(stdout); % Octave
  disp(N)
  count = 0;
  for k = 1 : N % Monte Carlo loop
    u1 = rand;
    u2 = rand;
    if norm([u1 u2]) <= 1 % distance from origin
      count = count + 1;
    end
  end
  pi_estimate_vector(idx_N) = count/N * 4 ;
end
toc

pi_error_vector = pi_estimate_vector - pi;  % vector of errors

% plot
figure;
subplot(211)
semilogx(N_vector, pi_estimate_vector)
hold on;
line([N_vector(1) N_vector(end)], pi*ones(1,2))
xlabel('Number of MC iterations')
ylabel('estimate')
subplot(212)
loglog(N_vector, abs(pi_error_vector))
hold on;
loglog(N_vector, 1./sqrt(N_vector), 'r')
xlabel('Number of MC iterations')
ylabel('absolute error')




% compute error of pi estimation  
% for varying number of Monte Carlo (MC) iterations
close all
clear 
clc

% initialize random number generator (for reproducibility)
rand('seed',1) 

N_trials = 1e2; % number of trials 

N_vector = round(logspace(1,5,13)); % % vector of number of MC iterations

tic
for idx_trial = 1 : N_trials
%   printf('%d\n',idx_trial), fflush(stdout); % Octave
  disp(idx_trial)
  for idx_N = 1 : length(N_vector)
    N = N_vector(idx_N);
    count = 0;
    for k = 1 : N % Monte Carlo loop
      u1 = rand;
      u2 = rand;
      if norm([u1 u2]) <= 1 % distance from origin
        count = count + 1;
      end
    end
    pi_estimate_matrix(idx_N, idx_trial) = count/N * 4 ;
  end
end
toc

pi_error_matrix = pi_estimate_matrix - pi;  % vector of errors

% plot
figure;
subplot(211)
semilogx(N_vector, mean(pi_estimate_matrix,2))
hold on;
line([N_vector(1) N_vector(end)], pi*ones(1,2))
xlabel('Number of MC iterations')
ylabel('estimate')
subplot(212)
loglog(N_vector, abs(mean(pi_error_matrix,2)))
hold on;
loglog(N_vector, 1e-1*1./sqrt(N_vector), 'r')
xlabel('Number of MC iterations')
ylabel('absolute error')